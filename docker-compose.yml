version: '3.8'

services:
  # PostgreSQL Database (Required for sharded deployments)
  db:
    image: postgres:15-alpine
    container_name: basslinebot-db
    environment:
      POSTGRES_DB: basslinebot
      POSTGRES_USER: bassline
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - basslinebot
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bassline -d basslinebot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Highly recommended for sharding)
  redis:
    image: redis:7-alpine
    container_name: basslinebot-redis
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - basslinebot
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Bot with Automatic Sharding (Recommended)
  bot-auto:
    build: .
    container_name: basslinebot-auto
    environment:
      # Core Configuration
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      BOT_NAME: ${BOT_NAME:-Bassline-Bot}
      
      # Automatic Sharding
      AUTO_SHARD: "true"
      
      # Database & Cache
      DATABASE_URL: postgresql://bassline:${DB_PASSWORD:-secure_password_here}@db:5432/basslinebot
      REDIS_URL: redis://${REDIS_PASSWORD:+:$REDIS_PASSWORD@}redis:6379/0
      
      # Dashboard (handled by shard 0)
      DASHBOARD_ENABLED: "true"
      DASHBOARD_HOST: "0.0.0.0"
      DASHBOARD_PORT: "8080"
      
      # Performance
      MAX_QUEUE_SIZE: "100"
      MAX_CONCURRENT_DOWNLOADS: "3"
      
      # Monitoring
      HEALTH_CHECK_ENABLED: "true"
      METRICS_ENABLED: "true"
      LOG_LEVEL: "INFO"
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - bot_downloads:/app/downloads
    ports:
      - "8080:8080"  # Dashboard
    networks:
      - basslinebot
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =========================================================================
  # MANUAL SHARDING SETUP (Alternative to automatic sharding above)
  # Uncomment and configure these services if you prefer manual control
  # =========================================================================

  # # Shard 0 (Main Dashboard Shard)
  # bot-shard-0:
  #   build: .
  #   container_name: basslinebot-shard-0
  #   environment:
  #     DISCORD_TOKEN: ${DISCORD_TOKEN}
  #     BOT_NAME: ${BOT_NAME:-Bassline-Bot}
  #     
  #     # Manual Sharding Configuration
  #     AUTO_SHARD: "false"
  #     SHARD_ID: "0"
  #     SHARD_COUNT: "2"
  #     
  #     # Database & Cache
  #     DATABASE_URL: postgresql://bassline:${DB_PASSWORD:-secure_password_here}@db:5432/basslinebot
  #     REDIS_URL: redis://${REDIS_PASSWORD:+:$REDIS_PASSWORD@}redis:6379/0
  #     
  #     # Dashboard (only on shard 0)
  #     DASHBOARD_ENABLED: "true"
  #     DASHBOARD_SHARD_ID: "0"
  #     DASHBOARD_HOST: "0.0.0.0"
  #     DASHBOARD_PORT: "8080"
  #     
  #     # Resource Limits
  #     MEMORY_LIMIT_MB: "512"
  #     MAX_VOICE_CONNECTIONS_PER_SHARD: "10"
  #     
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./data:/app/data
  #     - shard0_downloads:/app/downloads
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - basslinebot
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 768M
  #         cpus: '1.0'

  # # Shard 1
  # bot-shard-1:
  #   build: .
  #   container_name: basslinebot-shard-1
  #   environment:
  #     DISCORD_TOKEN: ${DISCORD_TOKEN}
  #     BOT_NAME: ${BOT_NAME:-Bassline-Bot}
  #     
  #     # Manual Sharding Configuration
  #     AUTO_SHARD: "false"
  #     SHARD_ID: "1"
  #     SHARD_COUNT: "2"
  #     
  #     # Database & Cache
  #     DATABASE_URL: postgresql://bassline:${DB_PASSWORD:-secure_password_here}@db:5432/basslinebot
  #     REDIS_URL: redis://${REDIS_PASSWORD:+:$REDIS_PASSWORD@}redis:6379/0
  #     
  #     # No dashboard on this shard
  #     DASHBOARD_ENABLED: "false"
  #     
  #     # Resource Limits
  #     MEMORY_LIMIT_MB: "512"
  #     MAX_VOICE_CONNECTIONS_PER_SHARD: "10"
  #     
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./data:/app/data
  #     - shard1_downloads:/app/downloads
  #   networks:
  #     - basslinebot
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 768M
  #         cpus: '1.0'

  # =========================================================================
  # MONITORING SERVICES (Optional but recommended)
  # =========================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: basslinebot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - basslinebot
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: basslinebot-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - basslinebot
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  basslinebot:
    driver: bridge
    name: basslinebot-network

volumes:
  postgres_data:
    name: basslinebot-postgres-data
  redis_data:
    name: basslinebot-redis-data
  bot_downloads:
    name: basslinebot-downloads
  prometheus_data:
    name: basslinebot-prometheus-data
  grafana_data:
    name: basslinebot-grafana-data
  
  # Manual sharding volumes (uncomment if using manual sharding)
  # shard0_downloads:
  #   name: basslinebot-shard0-downloads
  # shard1_downloads:
  #   name: basslinebot-shard1-downloads